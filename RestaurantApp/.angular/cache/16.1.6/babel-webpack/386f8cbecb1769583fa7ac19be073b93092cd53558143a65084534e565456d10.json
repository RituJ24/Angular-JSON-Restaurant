{"ast":null,"code":"// Helper function to generate random colors\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nexport {};\n// ngOnInit(): void {\n//   this.service.getSalaryChartInfo().subscribe((response) => {\n//     this.chartInfo = response;\n//     if (this.chartInfo != null) {\n//       for (let i = 0; i < this.chartInfo.length; i++) {\n//         this.labeldata.push(this.chartInfo[i].services);\n//         this.realdata.push(this.chartInfo[i].salary);\n//         this.colordata.push(this.chartInfo[i].colorcode);\n//       }\n//       this.createChart(this.labeldata, this.realdata, this.colordata);\n//     }\n//   });\n// }\n//   createChart(labeldata: any, realdata: any, colordata: any) {\n//     this.chart = new Chart('MyChart', {\n//       type: 'bar', // this denotes the type of chart\n//       data: {\n//         labels: labeldata, // x-axis\n//         datasets: [\n//           {\n//             label: 'Salary', //label color\n//             data: realdata,\n//             backgroundColor: colordata,\n//             borderColor: 'rgba(0, 0, 0, 0.2)', // Add a border color here\n//             borderWidth: 3, // Set the width of the border\n//             barThickness: 40,\n//           },\n//         ],\n//       },\n//       options: {\n//         aspectRatio: 2,\n//       },\n//     });\n//   }\n// }\n//   ngOnInit(): void {\n//     this.service.getSalaryChartInfo().subscribe((response) => {\n//       this.chartInfo = response;\n//       if (this.chartInfo != null) {\n//         for (let i = 0; i < this.chartInfo.length; i++) {\n//           this.labeldata.push(this.chartInfo[i].services);\n//           this.realdata.push(this.chartInfo[i].salary);\n//           this.colordata.push(this.chartInfo[i].colorcode);\n//         }\n//         this.createChart(this.labeldata, this.realdata, this.colordata);\n//       }\n//     });\n//   }\n//   createChart(labeldata: any, realdata: any, colordata: any) {}\n// }\n// class BarChartComponent extends ChartsDashboardComponent {\n//   public constructor(public override service: ChartDataService) {\n//     super(service);\n//   }\n//   override createChart(labeldata: any, realdata: any, colordata: any) {\n//     this.chart = new Chart('MyChart', {\n//       type: 'bar', //this denotes the type of chart\n//       data: {\n//         labels: labeldata, //x axis\n//         datasets: [\n//           {\n//             label: 'No of sales',\n//             data: realdata,\n//             backgroundColor: colordata,\n//             barThickness: 40,\n//           },\n//         ],\n//       },\n//       options: {\n//         aspectRatio: 2,\n//       },\n//     });\n//   }\n// }","map":{"version":3,"names":["getRandomColor","letters","color","i","Math","floor","random"],"sources":["E:\\Tanisha\\Projects\\Summer term\\Restaurant\\RestaurantApp\\src\\app\\charts-dashboard\\charts-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChartDataService } from '../charts-service/chart-data.service';\nimport Chart from 'chart.js/auto';\nimport {Post} from \n@Component({\n  selector: 'app-charts-dashboard',\n  templateUrl: './charts-dashboard.component.html',\n  styleUrls: ['./charts-dashboard.component.css'],\n})\nexport class ChartsDashboardComponent implements OnInit {\n  // public chart: any;\n  // public chartInfo: any;\n  // public labeldata: any[] = [];\n  // public realdata: any[] = [];\n  // public colordata: any[] = [];\n  public chart: any;\n  public chartInfo: any;\n  public labeldata: any[] = [];\n  public realdata: any[] = [];\n  public colordata: any[] = [];\n\n  constructor(public service: ChartDataService) {}\n\n  ngOnInit(): void {\n    this.service.getSalaryChartInfo().subscribe((response) => {\n      this.chartInfo = response;\n      if (this.chartInfo != null) {\n        const serviceSalaries = {}; // To store average salary for each service\n        for (let i = 0; i < this.chartInfo.length; i++) {\n          const service = this.chartInfo[i].services;\n          const salary = parseInt(this.chartInfo[i].salary);\n\n          // Calculate and update the average salary for each service\n          if (serviceSalaries[service]) {\n            serviceSalaries[service].total += salary;\n            serviceSalaries[service].count += 1;\n          } else {\n            serviceSalaries[service] = { total: salary, count: 1 };\n            this.labeldata.push(service);\n          }\n        }\n\n        // Calculate the average salary and populate the realdata array\n        for (const service in serviceSalaries) {\n          if (serviceSalaries.hasOwnProperty(service)) {\n            const averageSalary =\n              serviceSalaries[service].total / serviceSalaries[service].count;\n            this.realdata.push(averageSalary);\n            this.colordata.push(getRandomColor()); // Generate a random color for each service\n          }\n        }\n\n        this.createChart(this.labeldata, this.realdata, this.colordata);\n      }\n    });\n  }\n\n  createChart(labeldata: any, realdata: any, colordata: any) {\n    this.chart = new Chart('MyChart', {\n      type: 'bar', // this denotes the type of chart\n      data: {\n        labels: labeldata, // x-axis\n        datasets: [\n          {\n            label: 'Average Salary', //label color\n            data: realdata,\n            backgroundColor: colordata,\n            borderColor: 'rgba(0, 0, 0, 0.2)', // Add a border color here\n            borderWidth: 3, // Set the width of the border\n            barThickness: 40,\n          },\n        ],\n      },\n      options: {\n        aspectRatio: 2,\n      },\n    });\n  }\n}\n\n// Helper function to generate random colors\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n  \n\n  // ngOnInit(): void {\n  //   this.service.getSalaryChartInfo().subscribe((response) => {\n  //     this.chartInfo = response;\n  //     if (this.chartInfo != null) {\n  //       for (let i = 0; i < this.chartInfo.length; i++) {\n  //         this.labeldata.push(this.chartInfo[i].services);\n  //         this.realdata.push(this.chartInfo[i].salary);\n  //         this.colordata.push(this.chartInfo[i].colorcode);\n  //       }\n  //       this.createChart(this.labeldata, this.realdata, this.colordata);\n  //     }\n  //   });\n  // }\n\n//   createChart(labeldata: any, realdata: any, colordata: any) {\n//     this.chart = new Chart('MyChart', {\n//       type: 'bar', // this denotes the type of chart\n//       data: {\n//         labels: labeldata, // x-axis\n//         datasets: [\n//           {\n//             label: 'Salary', //label color\n//             data: realdata,\n//             backgroundColor: colordata,\n//             borderColor: 'rgba(0, 0, 0, 0.2)', // Add a border color here\n//             borderWidth: 3, // Set the width of the border\n//             barThickness: 40,\n//           },\n//         ],\n//       },\n//       options: {\n//         aspectRatio: 2,\n//       },\n//     });\n//   }\n// }\n\n//   ngOnInit(): void {\n//     this.service.getSalaryChartInfo().subscribe((response) => {\n//       this.chartInfo = response;\n//       if (this.chartInfo != null) {\n//         for (let i = 0; i < this.chartInfo.length; i++) {\n//           this.labeldata.push(this.chartInfo[i].services);\n//           this.realdata.push(this.chartInfo[i].salary);\n//           this.colordata.push(this.chartInfo[i].colorcode);\n//         }\n//         this.createChart(this.labeldata, this.realdata, this.colordata);\n//       }\n//     });\n//   }\n\n//   createChart(labeldata: any, realdata: any, colordata: any) {}\n// }\n\n// class BarChartComponent extends ChartsDashboardComponent {\n//   public constructor(public override service: ChartDataService) {\n//     super(service);\n//   }\n\n//   override createChart(labeldata: any, realdata: any, colordata: any) {\n//     this.chart = new Chart('MyChart', {\n//       type: 'bar', //this denotes the type of chart\n//       data: {\n//         labels: labeldata, //x axis\n//         datasets: [\n//           {\n//             label: 'No of sales',\n//             data: realdata,\n//             backgroundColor: colordata,\n//             barThickness: 40,\n//           },\n//         ],\n//       },\n//       options: {\n//         aspectRatio: 2,\n//       },\n//     });\n//   }\n// }\n"],"mappings":"AAgFA;AACA,SAASA,cAAcA,CAAA;EACrB,MAAMC,OAAO,GAAG,kBAAkB;EAClC,IAAIC,KAAK,GAAG,GAAG;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;;EAElD,OAAOJ,KAAK;AACd;;AAGE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}