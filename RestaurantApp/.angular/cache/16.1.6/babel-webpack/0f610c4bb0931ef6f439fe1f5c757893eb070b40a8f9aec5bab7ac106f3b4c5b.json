{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../charts-service/chart-data.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/card\";\nexport class ChartsDashboardComponent {\n  constructor(service) {\n    this.service = service;\n    this.labeldata = [];\n    this.realdata = [];\n    this.colordata = [];\n    this.inventoryData = [];\n  }\n  ngOnInit() {\n    //FOR BAR CHART : SALARVY AVERAGE\n    this.service.getSalaryChartInfo().subscribe(response => {\n      this.chartInfo = response; // Type assertion\n      if (this.chartInfo != null) {\n        const serviceSalaries = {}; // Type the serviceSalaries object\n        for (let i = 0; i < this.chartInfo.length; i++) {\n          const service = this.chartInfo[i].services;\n          const salary = parseInt(this.chartInfo[i].salary);\n          if (serviceSalaries[service]) {\n            serviceSalaries[service].total += salary;\n            serviceSalaries[service].count += 1;\n          } else {\n            serviceSalaries[service] = {\n              total: salary,\n              count: 1\n            };\n            this.labeldata.push(service);\n          }\n        }\n        for (const service in serviceSalaries) {\n          if (serviceSalaries.hasOwnProperty(service)) {\n            const averageSalary = serviceSalaries[service].total / serviceSalaries[service].count;\n            this.realdata.push(averageSalary);\n            this.colordata.push(getRandomColor());\n          }\n        }\n        this.createChart(this.labeldata, this.realdata, this.colordata);\n      }\n    });\n    //FOR PIE CHART: INVENTORY DATA\n    this.service.getInventoryData().subscribe(response => {\n      this.inventoryData = response;\n      if (this.inventoryData && this.inventoryData.length > 0) {\n        const itemNames = this.inventoryData.map(item => item.itemName);\n        const quantities = this.inventoryData.map(item => item.quantity);\n        this.createPieChart(itemNames, quantities);\n      }\n    });\n  }\n  //FOR BAR CHART : AVERAGE SALARY\n  createChart(labeldata, realdata, colordata) {\n    this.chart = new Chart('MyChart', {\n      type: 'bar',\n      data: {\n        labels: labeldata,\n        datasets: [{\n          label: 'Average Salary',\n          data: realdata,\n          backgroundColor: colordata,\n          borderColor: 'rgba(0, 0, 0, 0.2)',\n          borderWidth: 3,\n          barThickness: 40\n        }]\n      },\n      options: {\n        aspectRatio: 2,\n        plugins: {\n          legend: {\n            display: false // Hide the legend (label at the top)\n          }\n        }\n      }\n    });\n  }\n  //FOR PIE CHART: INVENTORY DATA\n  createPieChart(itemNames, quantities) {\n    const ctx = document.getElementById('PieChart');\n    this.pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: itemNames,\n        datasets: [{\n          data: quantities,\n          backgroundColor: ['rgba(255, 99, 132, 0.7)', 'rgba(54, 162, 235, 0.7)', 'rgba(255, 206, 86, 0.7)', 'rgba(75, 192, 192, 0.7)', 'rgba(153, 102, 255, 0.7)', 'rgba(255, 159, 64, 0.7)']\n        }]\n      }\n    });\n  }\n}\n// Helper function to generate random colors\nChartsDashboardComponent.ɵfac = function ChartsDashboardComponent_Factory(t) {\n  return new (t || ChartsDashboardComponent)(i0.ɵɵdirectiveInject(i1.ChartDataService));\n};\nChartsDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChartsDashboardComponent,\n  selectors: [[\"app-charts-dashboard\"]],\n  decls: 21,\n  vars: 0,\n  consts: [[1, \"navbar\", \"navbar-light\", \"bg-dark\"], [1, \"container\", \"container-fluid\"], [1, \"d-flex\"], [\"routerLink\", \"/restaurant\", 1, \"btn\", \"btn-secondary\"], [\"routerLink\", \"/login\", 1, \"btn\", \"btn-danger\", \"mx-3\"], [1, \"chart-container\"], [1, \"chart-card\"], [1, \"chart-border\"], [\"id\", \"MyChart\", \"width\", \"600\", \"height\", \"600\"], [\"id\", \"PieChart\", \"width\", \"400\", \"height\", \"400\"]],\n  template: function ChartsDashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"h2\");\n      i0.ɵɵtext(3, \"Restaurant App\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"button\", 3);\n      i0.ɵɵtext(6, \" Homepage \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵtext(8, \"Logout\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(9, \"div\", 5);\n      i0.ɵɵelement(10, \"h2\");\n      i0.ɵɵelementStart(11, \"mat-card\", 6);\n      i0.ɵɵelement(12, \"mat-card-header\");\n      i0.ɵɵelementStart(13, \"mat-card-content\")(14, \"div\", 7);\n      i0.ɵɵelement(15, \"canvas\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(16, \"mat-card\", 6);\n      i0.ɵɵelement(17, \"mat-card-header\");\n      i0.ɵɵelementStart(18, \"mat-card-content\")(19, \"div\", 7);\n      i0.ɵɵelement(20, \"canvas\", 9);\n      i0.ɵɵelementEnd()()()();\n    }\n  },\n  dependencies: [i2.RouterLink, i3.MatCard, i3.MatCardContent, i3.MatCardHeader],\n  styles: [\"h2[_ngcontent-%COMP%]{\\n    color:aliceblue;\\n}\\n.table1[_ngcontent-%COMP%]{\\n    text-align: center;\\n}\\n.chart-border[_ngcontent-%COMP%] {\\n  border: 7px solid black; \\n\\n  padding: 10px; \\n\\n  border-radius: 5px;\\n}\\n.chart-size[_ngcontent-%COMP%]\\n{\\n    margin-top: 10px;\\n    margin-left:10px;\\n    height: 90%;\\n    width:80%;\\n}\\n\\n\\n\\n\\n\\n\\n.mat-card[_ngcontent-%COMP%] {\\n  width: 100%;\\n  max-width: 600px; \\n  margin: 20px auto; \\n}\\n\\n.chart-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  flex-wrap: wrap;\\n}\\n\\n.chart-card[_ngcontent-%COMP%] {\\n  flex: 1;\\n  max-width: calc(50% - 20px);\\n  margin: 10px;\\n}\\n\\n.chart-pie-card[_ngcontent-%COMP%] {\\n  max-width: calc(33.33% - 20px); \\n\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhcnRzLWRhc2hib2FyZC9jaGFydHMtZGFzaGJvYXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxlQUFlO0FBQ25CO0FBQ0E7SUFDSSxrQkFBa0I7QUFDdEI7QUFDQTtFQUNFLHVCQUF1QixFQUFFLHlDQUF5QztFQUNsRSxhQUFhLEVBQUUsMkRBQTJEO0VBQzFFLGtCQUFrQjtBQUNwQjtBQUNBOztJQUVJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLFNBQVM7QUFDYjs7QUFFQTs7R0FFRzs7QUFFSDtFQUNFLFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsT0FBTztFQUNQLDJCQUEyQjtFQUMzQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSw4QkFBOEIsRUFBRSwyQ0FBMkM7QUFDN0UiLCJzb3VyY2VzQ29udGVudCI6WyJoMntcclxuICAgIGNvbG9yOmFsaWNlYmx1ZTtcclxufVxyXG4udGFibGUxe1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbi5jaGFydC1ib3JkZXIge1xyXG4gIGJvcmRlcjogN3B4IHNvbGlkIGJsYWNrOyAvKiBTZXQgdGhlIGJvcmRlciBwcm9wZXJ0aWVzIGFzIGRlc2lyZWQgKi9cclxuICBwYWRkaW5nOiAxMHB4OyAvKiBPcHRpb25hbDogQWRkIHBhZGRpbmcgdG8gY3JlYXRlIHNwYWNlIGFyb3VuZCB0aGUgY2hhcnQgKi9cclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbn1cclxuLmNoYXJ0LXNpemVcclxue1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIG1hcmdpbi1sZWZ0OjEwcHg7XHJcbiAgICBoZWlnaHQ6IDkwJTtcclxuICAgIHdpZHRoOjgwJTtcclxufVxyXG5cclxuLyogLmNoYXJ0LXNpemUge1xyXG4gIG1heC13aWR0aDogMTAwJTsgXHJcbn0gKi9cclxuXHJcbi5tYXQtY2FyZCB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiA2MDBweDsgXHJcbiAgbWFyZ2luOiAyMHB4IGF1dG87IFxyXG59XHJcblxyXG4uY2hhcnQtY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcbn1cclxuXHJcbi5jaGFydC1jYXJkIHtcclxuICBmbGV4OiAxO1xyXG4gIG1heC13aWR0aDogY2FsYyg1MCUgLSAyMHB4KTtcclxuICBtYXJnaW46IDEwcHg7XHJcbn1cclxuXHJcbi5jaGFydC1waWUtY2FyZCB7XHJcbiAgbWF4LXdpZHRoOiBjYWxjKDMzLjMzJSAtIDIwcHgpOyAvKiBBZGp1c3QgdGhlIHdpZHRoIG9mIHRoZSBwaWUgY2hhcnQgY2FyZCAqL1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}","map":{"version":3,"names":["Chart","ChartsDashboardComponent","constructor","service","labeldata","realdata","colordata","inventoryData","ngOnInit","getSalaryChartInfo","subscribe","response","chartInfo","serviceSalaries","i","length","services","salary","parseInt","total","count","push","hasOwnProperty","averageSalary","getRandomColor","createChart","getInventoryData","itemNames","map","item","itemName","quantities","quantity","createPieChart","chart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","barThickness","options","aspectRatio","plugins","legend","display","ctx","document","getElementById","pieChart","i0","ɵɵdirectiveInject","i1","ChartDataService","selectors","decls","vars","consts","template","ChartsDashboardComponent_Template","rf","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","letters","color","Math","floor","random"],"sources":["E:\\Tanisha\\Projects\\Summer term\\Restaurant\\RestaurantApp\\src\\app\\charts-dashboard\\charts-dashboard.component.ts","E:\\Tanisha\\Projects\\Summer term\\Restaurant\\RestaurantApp\\src\\app\\charts-dashboard\\charts-dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChartDataService } from '../charts-service/chart-data.service';\nimport Chart from 'chart.js/auto';\nimport { Post } from './models';\nimport {InventoryItem} from './models';\n\n@Component({\n  selector: 'app-charts-dashboard',\n  templateUrl: './charts-dashboard.component.html',\n  styleUrls: ['./charts-dashboard.component.css'],\n})\nexport class ChartsDashboardComponent implements OnInit {\n  public chart: any;\n  public chartInfo: any;\n  public labeldata: any[] = [];\n  public realdata: any[] = [];\n  public colordata: any[] = [];\n\n  public pieChart: any;\n  public inventoryData: InventoryItem[] = [];\n\n  constructor(public service: ChartDataService) {}\n\n  ngOnInit(): void {\n    //FOR BAR CHART : SALARVY AVERAGE\n    this.service.getSalaryChartInfo().subscribe((response) => {\n      this.chartInfo = response as Post[]; // Type assertion\n      if (this.chartInfo != null) {\n        const serviceSalaries: {\n          [key: string]: { total: number; count: number };\n        } = {}; // Type the serviceSalaries object\n\n        for (let i = 0; i < this.chartInfo.length; i++) {\n          const service = this.chartInfo[i].services;\n          const salary = parseInt(this.chartInfo[i].salary);\n\n          if (serviceSalaries[service]) {\n            serviceSalaries[service].total += salary;\n            serviceSalaries[service].count += 1;\n          } else {\n            serviceSalaries[service] = { total: salary, count: 1 };\n            this.labeldata.push(service);\n          }\n        }\n\n        for (const service in serviceSalaries) {\n          if (serviceSalaries.hasOwnProperty(service)) {\n            const averageSalary =\n              serviceSalaries[service].total / serviceSalaries[service].count;\n            this.realdata.push(averageSalary);\n            this.colordata.push(getRandomColor());\n          }\n        }\n\n        this.createChart(this.labeldata, this.realdata, this.colordata);\n      }\n    });\n\n    //FOR PIE CHART: INVENTORY DATA\n    this.service.getInventoryData().subscribe((response) => {\n      this.inventoryData = response as InventoryItem[];\n      if (this.inventoryData && this.inventoryData.length > 0) {\n        const itemNames = this.inventoryData.map((item) => item.itemName);\n        const quantities = this.inventoryData.map((item) => item.quantity);\n\n        this.createPieChart(itemNames, quantities);\n      }\n    });\n  }\n\n  //FOR BAR CHART : AVERAGE SALARY\n  createChart(labeldata: any, realdata: any, colordata: any) {\n    this.chart = new Chart('MyChart', {\n      type: 'bar', // this denotes the type of chart\n      data: {\n        labels: labeldata, // x-axis\n        datasets: [\n          {\n            label: 'Average Salary', //label color\n            data: realdata,\n            backgroundColor: colordata,\n            borderColor: 'rgba(0, 0, 0, 0.2)', // Add a border color here\n            borderWidth: 3, // Set the width of the border\n            barThickness: 40,\n          },\n        ],\n      },\n      options: {\n        aspectRatio: 2,\n        plugins: {\n          legend: {\n            display: false, // Hide the legend (label at the top)\n          },\n        },\n      },\n    });\n  }\n\n  //FOR PIE CHART: INVENTORY DATA\n  createPieChart(itemNames: string[], quantities: number[]) {\n    const ctx = document.getElementById('PieChart') as HTMLCanvasElement;\n    this.pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: itemNames,\n        datasets: [\n          {\n            data: quantities,\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.7)',\n              'rgba(54, 162, 235, 0.7)',\n              'rgba(255, 206, 86, 0.7)',\n              'rgba(75, 192, 192, 0.7)',\n              'rgba(153, 102, 255, 0.7)',\n              'rgba(255, 159, 64, 0.7)',\n            ],\n          },\n        ],\n      },\n    });\n  }\n}\n\n// Helper function to generate random colors\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n","<!--navbar starts-->\n<nav class=\"navbar navbar-light bg-dark\">\n  <div class=\"container container-fluid\">\n    <h2>Restaurant App</h2>\n    <div class=\"d-flex\">\n      <button routerLink=\"/restaurant\" class=\"btn btn-secondary\">\n        Homepage\n      </button>\n      <button routerLink=\"/login\" class=\"btn btn-danger mx-3\">Logout</button>\n    </div>\n  </div>\n</nav>\n<!--navbar ends-->\n\n<!--for bar chart: SALARY-->\n<div class=\"chart-container\">\n  <h2></h2>\n  <mat-card class=\"chart-card\">\n    <!-- for bar chart: SALARY -->\n    <mat-card-header>\n      <!-- <mat-card-title>Salary</mat-card-title> -->\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"chart-border\">\n        <canvas id=\"MyChart\" width=\"600\" height=\"600\"></canvas>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <!--for pie chart: INVENTORY-->\n  <mat-card class=\"chart-card\">\n    <!-- for bar chart: INVENTORY -->\n    <mat-card-header>\n      <!-- <mat-card-title>Pie Chart - Inventory</mat-card-title> -->\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"chart-border\">\n        <canvas id=\"PieChart\" width=\"400\" height=\"400\"></canvas>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}