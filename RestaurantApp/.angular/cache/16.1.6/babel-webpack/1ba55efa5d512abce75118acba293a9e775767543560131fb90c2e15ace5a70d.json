{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Chart from 'chart.js/auto';\nexport let ChartsDashboardComponent = class ChartsDashboardComponent {\n  constructor(service) {\n    this.service = service;\n    this.labeldata = [];\n    this.realdata = [];\n    this.colordata = [];\n    this.inventoryData = [];\n  }\n  ngOnInit() {\n    //FOR BAR CHART : SALARVY AVERAGE\n    this.service.getSalaryChartInfo().subscribe(response => {\n      this.chartInfo = response; // Type assertion\n      if (this.chartInfo != null) {\n        const serviceSalaries = {}; // Type the serviceSalaries object\n        for (let i = 0; i < this.chartInfo.length; i++) {\n          const service = this.chartInfo[i].services;\n          const salary = parseInt(this.chartInfo[i].salary);\n          if (serviceSalaries[service]) {\n            serviceSalaries[service].total += salary;\n            serviceSalaries[service].count += 1;\n          } else {\n            serviceSalaries[service] = {\n              total: salary,\n              count: 1\n            };\n            this.labeldata.push(service);\n          }\n        }\n        for (const service in serviceSalaries) {\n          if (serviceSalaries.hasOwnProperty(service)) {\n            const averageSalary = serviceSalaries[service].total / serviceSalaries[service].count;\n            this.realdata.push(averageSalary);\n            this.colordata.push(getRandomColor());\n          }\n        }\n        this.createChart(this.labeldata, this.realdata, this.colordata);\n      }\n    });\n    //FOR PIE CHART: INVENTORY DATA\n    this.service.getInventoryData().subscribe(response => {\n      this.inventoryData = response;\n      if (this.inventoryData && this.inventoryData.length > 0) {\n        const itemNames = this.inventoryData.map(item => item.itemName);\n        const quantities = this.inventoryData.map(item => item.quantity);\n        this.createPieChart(itemNames, quantities);\n      }\n    });\n    //FOR LINE CHART: INVENTORY DATA\n    this.service.getInventoryData().subscribe(response => {\n      this.inventoryData = response;\n      if (this.inventoryData && this.inventoryData.length > 0) {\n        const dates = this.inventoryData.map(item => item.date);\n        const amounts = this.inventoryData.map(item => item.amount);\n        this.createLineChart(dates, amounts);\n      }\n    });\n  }\n  //FOR BAR CHART : AVERAGE SALARY\n  createChart(labeldata, realdata, colordata) {\n    this.chart = new Chart('MyChart', {\n      type: 'bar',\n      data: {\n        labels: labeldata,\n        datasets: [{\n          label: 'Average Salary',\n          data: realdata,\n          backgroundColor: colordata,\n          borderColor: 'rgba(0, 0, 0, 0.2)',\n          borderWidth: 3,\n          barThickness: 40\n        }]\n      },\n      options: {\n        aspectRatio: 2,\n        plugins: {\n          legend: {\n            display: false // Hide the legend (label at the top)\n          }\n        }\n      }\n    });\n  }\n  //FOR PIE CHART: INVENTORY DATA\n  createPieChart(itemNames, quantities) {\n    const ctx = document.getElementById('PieChart');\n    this.pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: itemNames,\n        datasets: [{\n          data: quantities,\n          backgroundColor: quantities.map(() => getRandomColor())\n        }]\n      }\n    });\n  }\n  //FOR LINE CHART: INVENTORY DATA\n  createLineChart(dates, amounts) {\n    const ctx = document.getElementById('LineChart');\n    this.lineChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: dates,\n        datasets: [{\n          label: 'Amount',\n          data: amounts,\n          borderColor: 'rgba(75, 192, 192, 0.7)',\n          borderWidth: 2,\n          fill: false // Do not fill the area under the line\n        }]\n      },\n\n      options: {\n        aspectRatio: 2,\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    });\n  }\n};\nChartsDashboardComponent = __decorate([Component({\n  selector: 'app-charts-dashboard',\n  templateUrl: './charts-dashboard.component.html',\n  styleUrls: ['./charts-dashboard.component.css']\n})], ChartsDashboardComponent);\n// Helper function to generate random colors\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}","map":{"version":3,"names":["Component","Chart","ChartsDashboardComponent","constructor","service","labeldata","realdata","colordata","inventoryData","ngOnInit","getSalaryChartInfo","subscribe","response","chartInfo","serviceSalaries","i","length","services","salary","parseInt","total","count","push","hasOwnProperty","averageSalary","getRandomColor","createChart","getInventoryData","itemNames","map","item","itemName","quantities","quantity","createPieChart","dates","date","amounts","amount","createLineChart","chart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","barThickness","options","aspectRatio","plugins","legend","display","ctx","document","getElementById","pieChart","lineChart","fill","__decorate","selector","templateUrl","styleUrls","letters","color","Math","floor","random"],"sources":["E:\\Tanisha\\Projects\\Summer term\\Restaurant\\RestaurantApp\\src\\app\\charts-dashboard\\charts-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChartDataService } from '../charts-service/chart-data.service';\nimport Chart from 'chart.js/auto';\nimport { Post } from './models';\nimport {InventoryItem} from './models';\n\n@Component({\n  selector: 'app-charts-dashboard',\n  templateUrl: './charts-dashboard.component.html',\n  styleUrls: ['./charts-dashboard.component.css'],\n})\nexport class ChartsDashboardComponent implements OnInit {\n  public chart: any;\n  public chartInfo: any;\n  public labeldata: any[] = [];\n  public realdata: any[] = [];\n  public colordata: any[] = [];\n\n  public pieChart: any;\n  public inventoryData: InventoryItem[] = [];\n  public lineChart: any;\n\n  constructor(public service: ChartDataService) {}\n\n  ngOnInit(): void {\n    //FOR BAR CHART : SALARVY AVERAGE\n    this.service.getSalaryChartInfo().subscribe((response) => {\n      this.chartInfo = response as Post[]; // Type assertion\n      if (this.chartInfo != null) {\n        const serviceSalaries: {\n          [key: string]: { total: number; count: number };\n        } = {}; // Type the serviceSalaries object\n\n        for (let i = 0; i < this.chartInfo.length; i++) {\n          const service = this.chartInfo[i].services;\n          const salary = parseInt(this.chartInfo[i].salary);\n\n          if (serviceSalaries[service]) {\n            serviceSalaries[service].total += salary;\n            serviceSalaries[service].count += 1;\n          } else {\n            serviceSalaries[service] = { total: salary, count: 1 };\n            this.labeldata.push(service);\n          }\n        }\n\n        for (const service in serviceSalaries) {\n          if (serviceSalaries.hasOwnProperty(service)) {\n            const averageSalary =\n              serviceSalaries[service].total / serviceSalaries[service].count;\n            this.realdata.push(averageSalary);\n            this.colordata.push(getRandomColor());\n          }\n        }\n\n        this.createChart(this.labeldata, this.realdata, this.colordata);\n      }\n    });\n\n    //FOR PIE CHART: INVENTORY DATA\n    this.service.getInventoryData().subscribe((response) => {\n      this.inventoryData = response as InventoryItem[];\n      if (this.inventoryData && this.inventoryData.length > 0) {\n        const itemNames = this.inventoryData.map((item) => item.itemName);\n        const quantities = this.inventoryData.map((item) => item.quantity);\n\n        this.createPieChart(itemNames, quantities);\n      }\n    });\n\n    //FOR LINE CHART: INVENTORY DATA\n    this.service.getInventoryData().subscribe((response) => {\n      this.inventoryData = response as InventoryItem[];\n      if (this.inventoryData && this.inventoryData.length > 0) {\n        const dates = this.inventoryData.map((item) => item.date);\n        const amounts = this.inventoryData.map((item) => item.amount);\n\n        this.createLineChart(dates, amounts);\n      }\n    });\n  }\n\n  //FOR BAR CHART : AVERAGE SALARY\n  createChart(labeldata: any, realdata: any, colordata: any) {\n    this.chart = new Chart('MyChart', {\n      type: 'bar', // this denotes the type of chart\n      data: {\n        labels: labeldata, // x-axis\n        datasets: [\n          {\n            label: 'Average Salary', //label color\n            data: realdata,\n            backgroundColor: colordata,\n            borderColor: 'rgba(0, 0, 0, 0.2)', // Add a border color here\n            borderWidth: 3, // Set the width of the border\n            barThickness: 40,\n          },\n        ],\n      },\n      options: {\n        aspectRatio: 2,\n        plugins: {\n          legend: {\n            display: false, // Hide the legend (label at the top)\n          },\n        },\n      },\n    });\n  }\n\n  //FOR PIE CHART: INVENTORY DATA\n  createPieChart(itemNames: string[], quantities: number[]) {\n    const ctx = document.getElementById('PieChart') as HTMLCanvasElement;\n    this.pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: itemNames,\n        datasets: [\n          {\n            data: quantities,\n            backgroundColor: quantities.map(() => getRandomColor()),\n          },\n        ],\n      },\n    });\n  }\n\n  //FOR LINE CHART: INVENTORY DATA\n  createLineChart(dates: string[], amounts: number[]) {\n    const ctx = document.getElementById('LineChart') as HTMLCanvasElement;\n    this.lineChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: dates, // x-axis labels (dates)\n        datasets: [\n          {\n            label: 'Amount', // Label for the dataset\n            data: amounts, // y-axis data (amounts)\n            borderColor: 'rgba(75, 192, 192, 0.7)', // Line color\n            borderWidth: 2, // Line width\n            fill: false, // Do not fill the area under the line\n          },\n        ],\n      },\n      options: {\n        aspectRatio: 2,\n        plugins: {\n          legend: {\n            display: false,\n          },\n        },\n      },\n    });\n  }\n}\n\n\n\n// Helper function to generate random colors\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}