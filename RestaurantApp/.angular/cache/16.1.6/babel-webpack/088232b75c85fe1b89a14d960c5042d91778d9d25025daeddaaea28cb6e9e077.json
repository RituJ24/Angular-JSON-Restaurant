{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Chart from 'chart.js/auto';\nexport let ChartsDashboardComponent = class ChartsDashboardComponent {\n  constructor(service) {\n    this.service = service;\n    this.labeldata = [];\n    this.realdata = [];\n    this.colordata = [];\n  }\n  ngOnInit() {\n    this.service.getSalaryChartInfo().subscribe(response => {\n      this.chartInfo = response; // Type assertion\n      if (this.chartInfo != null) {\n        const serviceSalaries = {}; // Type the serviceSalaries object\n        for (let i = 0; i < this.chartInfo.length; i++) {\n          const service = this.chartInfo[i].services;\n          const salary = parseInt(this.chartInfo[i].salary);\n          if (serviceSalaries[service]) {\n            serviceSalaries[service].total += salary;\n            serviceSalaries[service].count += 1;\n          } else {\n            serviceSalaries[service] = {\n              total: salary,\n              count: 1\n            };\n            this.labeldata.push(service);\n          }\n        }\n        for (const service in serviceSalaries) {\n          if (serviceSalaries.hasOwnProperty(service)) {\n            const averageSalary = serviceSalaries[service].total / serviceSalaries[service].count;\n            this.realdata.push(averageSalary);\n            this.colordata.push(getRandomColor());\n          }\n        }\n        this.createChart(this.labeldata, this.realdata, this.colordata);\n      }\n    });\n  }\n  createChart(labeldata, realdata, colordata) {\n    this.chart = new Chart('MyChart', {\n      type: 'bar',\n      data: {\n        labels: labeldata,\n        datasets: [{\n          label: 'Average Salary',\n          data: realdata,\n          backgroundColor: colordata,\n          borderColor: 'rgba(0, 0, 0, 0.2)',\n          borderWidth: 3,\n          barThickness: 40\n        }]\n      },\n      options: {\n        aspectRatio: 2,\n        plugins: {\n          legend: {\n            display: false // Hide the legend (label at the top)\n          }\n        }\n      }\n    });\n  }\n};\n\nChartsDashboardComponent = __decorate([Component({\n  selector: 'app-charts-dashboard',\n  templateUrl: './charts-dashboard.component.html',\n  styleUrls: ['./charts-dashboard.component.css']\n})], ChartsDashboardComponent);\n// Helper function to generate random colors\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}","map":{"version":3,"names":["Component","Chart","ChartsDashboardComponent","constructor","service","labeldata","realdata","colordata","ngOnInit","getSalaryChartInfo","subscribe","response","chartInfo","serviceSalaries","i","length","services","salary","parseInt","total","count","push","hasOwnProperty","averageSalary","getRandomColor","createChart","chart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","barThickness","options","aspectRatio","plugins","legend","display","__decorate","selector","templateUrl","styleUrls","letters","color","Math","floor","random"],"sources":["E:\\Tanisha\\Projects\\Summer term\\Restaurant\\RestaurantApp\\src\\app\\charts-dashboard\\charts-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChartDataService } from '../charts-service/chart-data.service';\nimport Chart from 'chart.js/auto';\nimport { Post } from './models';\n\n@Component({\n  selector: 'app-charts-dashboard',\n  templateUrl: './charts-dashboard.component.html',\n  styleUrls: ['./charts-dashboard.component.css'],\n})\nexport class ChartsDashboardComponent implements OnInit {\n  // public chart: any;\n  // public chartInfo: any;\n  // public labeldata: any[] = [];\n  // public realdata: any[] = [];\n  // public colordata: any[] = [];\n  public chart: any;\n  public chartInfo: any;\n  public labeldata: any[] = [];\n  public realdata: any[] = [];\n  public colordata: any[] = [];\n\n  constructor(public service: ChartDataService) {}\n\n  ngOnInit(): void {\n    this.service.getSalaryChartInfo().subscribe((response) => {\n      this.chartInfo = response as Post[]; // Type assertion\n      if (this.chartInfo != null) {\n        const serviceSalaries: {\n          [key: string]: { total: number; count: number };\n        } = {}; // Type the serviceSalaries object\n\n        for (let i = 0; i < this.chartInfo.length; i++) {\n          const service = this.chartInfo[i].services;\n          const salary = parseInt(this.chartInfo[i].salary);\n\n          if (serviceSalaries[service]) {\n            serviceSalaries[service].total += salary;\n            serviceSalaries[service].count += 1;\n          } else {\n            serviceSalaries[service] = { total: salary, count: 1 };\n            this.labeldata.push(service);\n          }\n        }\n\n        for (const service in serviceSalaries) {\n          if (serviceSalaries.hasOwnProperty(service)) {\n            const averageSalary =\n              serviceSalaries[service].total / serviceSalaries[service].count;\n            this.realdata.push(averageSalary);\n            this.colordata.push(getRandomColor());\n          }\n        }\n\n        this.createChart(this.labeldata, this.realdata, this.colordata);\n      }\n    });\n  }\n\n  createChart(labeldata: any, realdata: any, colordata: any) {\n    this.chart = new Chart('MyChart', {\n      type: 'bar', // this denotes the type of chart\n      data: {\n        labels: labeldata, // x-axis\n        datasets: [\n          {\n            label: 'Average Salary', //label color\n            data: realdata,\n            backgroundColor: colordata,\n            borderColor: 'rgba(0, 0, 0, 0.2)', // Add a border color here\n            borderWidth: 3, // Set the width of the border\n            barThickness: 40,\n          },\n        ],\n      },\n      options: {\n        aspectRatio: 2,\n        plugins: {\n          legend: {\n            display: false, // Hide the legend (label at the top)\n          },\n        },\n      },\n    });\n  }\n}\n\n// Helper function to generate random colors\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}